STACK:
l=[]
n=int(input('Enter num of elements:'))
for i in range(n):
    l.append(int(input("Enter an element:")))
print(l)
for i in range(n):
    print(l.pop())
print(l)

method2:
from collections import deque
l=deque()
n=int(input("Enter n value:"))
for i in range(n):
    l.append(int(input("Enter the value:")))
for i in range(n):
    print(l.pop())
print(l)

QUEUE:
l=[]
n=int(input("Enter n value:"))
for i in range(n):
    l.append(int(input("Enter the value:")))
for i in range(n):
    print(l.pop(0))
print(l)

Method2:
from collections import deque
l=deque()
n=int(input("Enter n value:"))
for i in range(n):
    l.append(int(input("Enter the value:")))
for i in range(n):
    print(l.popleft())
print(l)

def check(arr,target,n):
    if target==0:
        return True
    if n==0:
        return False
    if arr[n-1]>target:
        return check(arr,target,n-1)
    return check(arr,target-arr[n-1],n-1) or check(arr,target,n-1)
    
arr=[3,12,5,4,24,2]
target=9
ans=check(arr,target,len(arr))
if ans==True:
    print("True")
else:
    print("False")

=>Magic sqaure matrix

=>Balanced expression

stack=[]
exp=input("Enter the expression:")
n=len(exp)
if(n%2!=0):
    print("Unbalanced")
else:
    for i in range(n):
        if(exp[i]=='[' or '{' or '('):
            stack.append(i)
        elif(exp[i]==']' or '}' or ')'):
            if(len(stack)==0):
                print("Unbalanced")
                break
            stack.pop()
    if(len(stack)==0):
        print("balanced")
    else:
        print("Unbalanced")

=>Generate a Balanced expression
=>N Queens

def is_valid(board,row,col,n):
    for i in range(col):
        if board[row][i]==1:
            return False
    i=row
    j=col
    while i>=0 and j>=0:
        if board[i][j]==1:
            return False
        i-=1
        j-=1
    i=row
    j=col
    while i<n and j>=0:
        if board[i][j]==1:
            return False
        if board[i][j]==1:
            return False
        i+=1
        j-=1
    return True
def solve(n):
    board=[[0 for i in range(n)] for j in range(n)]
    def backtrack(col):
        if col==n:
            return True
        for i in range(n):
            if is_valid(board,i,col,n):
                board[i][col]=1
                if backtrack(col+1):
                    return True
                board[i][col]=0
        return False
        
    if backtrack(0):
        for row in board:
            print(row)
    else:
        print("no solution")
n=int(input())
solve(n)

=>if the sum=28 print all the subsets that sums to 28
[6,8,9,5,4,3,26,2]

=>Bubblesort that stops iteration once you get the sorted order
def bubblesort(a,n):
    for j in range(n):
        sorted=False
        for i in range(n-j-1):
            if a[i]>a[i+1]:
                temp=a[i]
                a[i]=a[i+1]
                a[i+1]=temp
                sorted=True
        if not sorted:
            break
a=list(map(int,input().split(",")))
n=len(a)
bubblesort(a,n)
print(a)   

=>Insertionsort

def insertion_sort(a, n):
    for i in range(1, n):
        key = a[i]
        j = i - 1
        while j >= 0 and a[j] > key:
            a[j + 1] = a[j]
            j -= 1
        a[j + 1] = key

a = list(map(int, input("Enter numbers separated by commas: ").split(",")))
n = len(a)
insertion_sort(a, n)
print("Sorted List:", a)

a=list(map(int,input().split(",")))
n=len(a)
for j in range(n):
    small=j
    for i in range(j+1,n):
        if a[i]<a[small]:
            small=i
        temp=a[j]
        a[j]=a[small]
        a[small]=temp
print(a)

def selectionsort(a,n):
    for j in range(n):
        small=j
        for i in range(j+1,n):
            if a[i]<a[small]:
                small=i
        temp=a[j]
        a[j]=a[small]
        a[small]=temp
    return a
a=list(map(int,input().split(",")))
n=len(a)
selectionsort(a,n)
print(a)

def quicksort(a):
    if len(a)<1:
        return a
    else:
        pivot=a[0]
        left=[i for i in a if i<pivot]
        right=[i for i in a if i>pivot]
        return quicksort(left)+[pivot]+quicksort(right)
a=list(map(int,input().split(" ")))
print(quicksort(a))
