#Binarysearch
def binarysearch(a,target):
    low=0
    high=len(a)-1
    while low<=high:
        mid=(low+high)//2
        if(a[mid]==target):
            return mid
        if(a[mid]<target):
            low=mid+1
        if(a[mid]>target):
            high=mid-1
    return -1
a=sorted(list(map(int,input().split(","))))
target=int(input("Enter element to search:"))
c=binarysearch(a,target)
if(c!=-1):
    print("Found")
else:
    print("Not Found")

take the input from the user in the given format(consist of name and code) find the max digit from the code which is less or equal to the length of string and put that place char in final string, if there is no any digit found which not satisfy the condition that simply put 'x' input Abhishek:43848,Mayur: 3749,Friend:3949,Yeah:7878 output kueX

def process_input(input_string):
    pairs = input_string.split(',')
    final_string = ""
    
    for pair in pairs:
        name, code = pair.split(':')
        max_digit = -1
        for digit in code:
            if int(digit) <= len(name) and int(digit) > max_digit:
                max_digit = int(digit)
        if max_digit != -1:
            final_string += name[max_digit - 1]
        else:
            final_string += 'x'
    
    return final_string

user_input = input("Enter names and codes (in the format Name:Code,Name:Code): ")

output = process_input(user_input)
print("Output:", output)

s=input()#Abhishek:43848,Mayur:3749,Friend:3949,Yeah:7878
los=s.split(',')
op=''
for i in los:
    nc=i.split(':')
    name=nc[0]
    code=nc[1]
    max=0
    for i in code:
        if int(i)>max and int(i)<=len(name):
            max=int(i)
    if max==0:
        op+='X'
    else:
        op+=name[max-1]
print(op)

=>Balanced Brackets Problem

input:()()
output:0
input:((())
output:6
input:{(){}[]}(}
output:5

def demo(s):
    c=0
    l=[]
    for i in s:
        if i=='[' or i=='{' or i=='(':
            l.append(i)
            c+=1
            continue
        if len(l)==0:
            return c+1
        temp=l.pop()
        if temp=='(' and i==')':
            c+=1
        elif temp=='[' and i==']':
            c+=1
        elif temp=='{' and i=='}':
            c+=1
        else:
            return c+1
    if len(l)==0:
        return 0
    else:
        return c+1
s=input()
print(demo(s))

Reverse the given string and eeping its special character at the same place.
Example
input :srin#ivas
output:savi#nirs
input :we@lcome
output:em@oclew
input :pyth#on
output:noht#yp
     
def demo(s):
    for i in s:
        if i.isalpha():
            l.append(i)
        else:
            spc=i
            idxspc=s.index(i)
    l.reverse()
    l.insert(idxspc,spc)
    return ''.join(l)
s=input()
l=[]
print(demo(s))

input:A string of comma separated numbers are given such that the numbers 4 and 7 are already available in the list. assumption: 7 always comes after 4 in the given string. Number1=Add all numbers which do not lie b/w 4 and 7(excluding 4 and 7)in the given input.
Number2:numbers formed by cancatinating all numbers from 4 to 7(including 4 and 7)
o/p:sum of number1 and number2
Example:2,5,1,4,3,2,7,8
number1:2+5+1+8=16
Number2:'4'+'3'+'2'+'7'='4327'
output:16+4327=4343 

def demo(s):
    los=s.split(",")
    idxpof=los.index('4')
    idxpos=los.index('7')
    n1,n2=0,''
    for i in los[:idxpof]+los[idxpos+1:]:
        n1+=int(i)
    for i in los[idxpof:idxpos+1]:
        n2+=i
    return(n1+int(n2))
s=input()
print(demo(s))

Two pointers Approach:(2 pointers in a loop)
arr[]={2,3,5,7,10,12,15,20},target=19
ans:4,6
explanation:return i and j th pointer whose sum of indexed values equals to target


arr = [2, 3, 5, 7, 10, 12, 15, 20]
target = 19
i = 0
j = len(arr) - 1
while i < j:
    curr_sum = arr[i] + arr[j]
    if curr_sum == target:
        print(i, j) 
        break
    elif curr_sum < target:
        i += 1
    else:
        j -= 1
else:
    print("No such pair found")


=>int arr={1,2,8,10,10,12,19}
floor of 7 (greatest element but which is smaller than 7) in the array:2

def binary_search_floor(arr,target):
    left,right=0,len(arr)-1
    floor=-1
    while left<=right:
        mid=(left+(right-left))//2
        if arr[mid]==target:
            return arr[mid]
        elif arr[mid]<target:
            floor=arr[mid]
            left=mid+1
        else:
            right=mid-1
    return floor
arr=list(map(int,input().split(",")))
target=int(input())
print(binary_search_floor(arr,target))


#ceil
def binary_search_ceil(arr,target):
    left,right=0,len(arr)-1
    floor=-1
    while left<=right:
        mid=(left+(right-left))//2
        if arr[mid]==target:
            return arr[mid]
        elif arr[mid]<target:
            left=mid+1
        else:
            ceil=arr[mid]
            right=mid-1
    return ceil
arr=list(map(int,input().split(",")))
target=int(input())
print(binary_search_ceil(arr,target))

You are given an array of N integers and another integer k,how many numbers appear in the array atleast k times?
standard input:
the first line contains two integers N and k.
The second line contains N integers ,representing the elements of the array.
standard output
print the answer on the first line.
Example:
input:
3 1
1 1 1
output:
1

input:
5 2
1 2 3 2 1
output:2

n,k=map(int,input().split())
a=[]
for i in range(n):
    a.append(int(input()))
s,c=set(a),0
for i in s:
    if a.count(i)>=k:
        c+=1
print(c)




=>decimal to binary convertion and put 1 at the provided index and convert to decimal number and print
=>Tower of hanoi
def TOH(n, src, aux, dest):
    if n <= 1:
        print(src + " -> " + dest)
        return
    TOH(n-1, 'src', 'dest', 'aux')
    print(src + " -> " + dest)
    TOH(n-1, 'aux', 'src', 'dest')
n = 4
TOH(n, 'src', 'aux', 'dest')

n=int(input())
if n==1:
    print(1)
else:
    r=(2**n)-1
    print(r)
